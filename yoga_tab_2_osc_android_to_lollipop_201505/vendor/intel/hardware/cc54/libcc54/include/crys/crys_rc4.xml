<?xml version="1.0" encoding="US-ASCII" ?>
<!--****************************************************************  
* (c) Copyright 2011-2012 Discretix Technologies Ltd.              *
* This software is protected by copyright, international           *
* treaties and patents.                                            *
* Use of this Software as part of or with the Discretix CryptoCell *
* or Packet Engine products is governed by the products'           *
* commercial end user license agreement ("EULA").                  *
* It is possible that copies of this Software might be distributed *
* under some type of GNU General Public License ("GPL").           *
* Notwithstanding any such distribution under the terms of GPL,    *
* GPL does not govern the use of this Software as part of or with  *
* the Discretix CryptoCell or Packet Engine products, for which a  *
* EULA is required.                                                *
* If the product's EULA allows any copy or reproduction of this    *
* Software, then such copy or reproduction must include this       *
* Copyright Notice as well as any other notices provided           *
* thereunder.                                                      *
*****************************************************************-->
<!-- SepRpcTest API description: An API dedicated to test the RPC mechanism -->

<api name="CrysRc4"> <!-- The AesWrapRpc API Agent ID -->

  <!-- Default return codes for generated wrapper code (may be overriden for specific functions -->
  <retcodes ok="CRYS_OK"  generic_error="CRYS_RC4_INVALID_USER_CONTEXT_POINTER_ERROR" invalid_param="CRYS_RC4_DATA_IN_POINTER_INVALID_ERROR" not_enough_resources="CRYS_RC4_DATA_SIZE_ILLEGAL" /> 

  <!-- Header files to include for prototypes -->
  <header>crys_rc4.h</header>
  <header>crys_rc4_error.h</header>

  <function name="CRYS_RC4_Init" return="le32(CRYSError_t)">
    <!-- 
    CRYSError_t  CRYS_RC4_Init( CRYS_RC4UserContext_t    *ContextID_ptr,
                                DxUint8_t                *Key_ptr, 
                                DxUint32_t                KeySizeInBytes);

    -->
    <param name="ContextID_ptr" direction="io" ptype="ref" dtype="CRYS_RC4UserContext_t" /> <!--CRYS_RC4UserContext_t    *ContextID_ptr -->
    <param name="Key_ptr" direction="i" ptype="array(KeySizeInBytes,CRYS_RC4_MAX_KEY_SIZE_IN_BYTES)" dtype="DxUint8_t"  /> <!--DxUint8_t *Key_ptr-->
    <param name="KeySizeInBytes" direction="i" ptype="val" dtype="le32(DxUint32_t)"/>  <!--DxUint32_t KeySizeInBytes-->
  </function>

  <function name="CRYS_RC4_Stream" return="le32(CRYSError_t)">
    <!-- 
    CRYSError_t  CRYS_RC4_Stream(
	             CRYS_RC4UserContext_t        *ContextID_ptr,   
                 DxUint8_t                    *DataIn_ptr,                                  
                 DxUint32_t                    DataInSize,
                 DxUint8_t                    *DataOut_ptr);  
    -->
    <param name="ContextID_ptr" direction="io" ptype="ref" dtype="CRYS_RC4UserContext_t" /> <!--CRYS_RC4UserContext_t  *ContextID_ptr -->
    <param name="DataIn_ptr" direction="i" ptype="buf(DataInSize)" dtype="DxUint8_t"/> <!--DxUint8_t *DataIn_ptr -->
    <param name="DataInSize" direction="i" ptype="val" dtype="le32(DxUint32_t)"/>  <!--DxUint32_t  DataInSize-->
    <param name="DataOut_ptr" direction="o" ptype="buf(DataInSize)" dtype="DxUint8_t"/>  <!--DxUint8_t  *DataOut_ptr-->
  </function>

  <function name="CRYS_RC4_Free" return="le32(CRYSError_t)">
    <!-- 
    CRYSError_t  CRYS_RC4_Free(CRYS_RC4UserContext_t *ContextID_ptr );
    -->
    <param name="ContextID_ptr" direction="io" ptype="ref" dtype="CRYS_RC4UserContext_t" /> <!--CRYS_RC4UserContext_t *ContextID_ptr -->
  </function>

  <function name="CRYS_RC4" return="le32(CRYSError_t)">
    <!-- 

    CRYSError_t CRYS_RC4( DxUint8_t    *Key_ptr, 
						  DxUint32_t    KeySizeInBytes,
						  DxUint8_t    *DataIn_ptr, 
						  DxUint32_t    DataInSize,
						  DxUint8_t    *DataOut_ptr );  

    -->
    <param name="Key_ptr" direction="i" ptype="array(KeySizeInBytes,CRYS_RC4_MAX_KEY_SIZE_IN_BYTES)" dtype="DxUint8_t" /> <!--DxUint8_t *Key_ptr-->
    <param name="KeySizeInBytes" direction="i" ptype="val" dtype="le32(DxUint32_t)"/>       <!--DxUint32_t  KeySizeInBytes-->
    <param name="DataIn_ptr" direction="i" ptype="buf(DataInSize)" dtype="DxUint8_t"/> <!--DxUint8_t *DataIn_ptr -->
    <param name="DataInSize" direction="i" ptype="val" dtype="le32(DxUint32_t)"/>  <!--DxUint32_t  DataInSize-->
    <param name="DataOut_ptr" direction="o" ptype="buf(DataInSize)" dtype="DxUint8_t"/>  <!--DxUint8_t  *DataOut_ptr-->
  </function>

</api>


